openapi: 3.0.0
info:
  title: Time Tracking API
  version: '1.0'
  description: ''
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: User not found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  '/{userId}/log':
    post:
      summary: Timeblocks
      operationId: log-time
      description: Start logging a time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntry'
            examples: {}
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    delete:
      summary: ''
      operationId: discard-timelog
      responses:
        '200':
          description: OK
      description: Discard currently logged time
    put:
      summary: ''
      operationId: stop-timelog
      responses:
        '200':
          description: OK
      description: Update (stop) current time session.
  '/{userId}/summary':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Generate weekly summary
      tags: []
      responses: {}
      operationId: get-userId-summary
      description: Provides .csv file with timesheet from past week.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sum:
                  type: object
                  properties:
                    monday:
                      type: string
                    tuesday:
                      type: string
                    '':
                      type: string
                fromDate:
                  type: string
                toDate:
                  type: string
                file:
                  type: string
  /users:
    get:
      summary: Get users from database
      tags: []
      responses: {}
      operationId: get-users
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
            examples: {}
    post:
      summary: ''
      operationId: create-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  status:
                    type: string
                    example: Created successfully!
              examples: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples: {}
      properties:
        _id:
          type: string
          description: Unique identifier for the given user.
          format: uuid
        nickname:
          type: string
          example: Jay
      required:
        - nickname
    TimeEntry:
      title: TimeEntry
      type: object
      description: ''
      properties:
        _id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'
        isTracking:
          type: boolean
        description:
          type: string
        startedAt:
          type: string
        endedAt:
          type: string
      required:
        - user
        - isTracking
        - startedAt
