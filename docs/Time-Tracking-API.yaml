openapi: 3.0.0
info:
  title: Time Tracking API
  version: '2.1'
  description: API for a small application commissioned for me as a recruitment task by Nextrope. The purpose of the application is to use TypeScript and any HTTP application framework to create a solution that will allow us to track time and generate reports on how much time we spent working on a given day.
  contact:
    name: Jay Whitewood
    url: 'https://github.com/keinsell'
    email: keinsell@protonmail.com
  license:
    name: MIT
    url: 'https://github.com/keinsell/timo/blob/main/LICENSE'
servers:
  - url: 'http://localhost:1337'
    description: local
  - description: staging
    url: 'https://a68f86c.herokuapp.com'
paths:
  '/{userId}/log':
    post:
      summary: Timeblocks
      operationId: log-time
      description: Start logging a time
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeEntry'
            examples: {}
        description: ''
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    delete:
      summary: ''
      operationId: discard-timelog
      responses:
        '200':
          description: OK
      description: Discard currently logged time
    put:
      summary: ''
      operationId: stop-timelog
      responses:
        '200':
          description: OK
      description: Update (stop) current time session.
  '/{userId}/summary':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Generate weekly summary
      tags: []
      responses: {}
      operationId: get-userId-summary
      description: Provides .csv file with timesheet from past week.
      requestBody:
        content:
          application/json:
            schema:
              type: object
    post:
      summary: Get summary from specific timeframe
      operationId: post-userId-summary
      responses:
        '200':
          description: OK
      description: ''
  /users:
    get:
      summary: Check users from database
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    data:
                      - jay
                properties:
                  data:
                    type: array
                    items:
                      type: string
                required:
                  - data
              examples: {}
      operationId: get-users
      description: Get an array of usernames found in database.
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples: {}
      properties:
        _id:
          type: string
          description: Unique identifier for the given user.
          format: uuid
        nickname:
          type: string
          example: Jay
      required:
        - nickname
    TimeEntry:
      title: Timeblock
      type: object
      description: Database model that holds information about single Timeblock.
      properties:
        _id:
          type: string
          format: uuid
        user:
          type: string
        isTracking:
          type: boolean
        description:
          type: string
        startedAt:
          type: string
        endedAt:
          type: string
        duration:
          type: string
      required:
        - user
        - isTracking
        - startedAt
